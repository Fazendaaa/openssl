dir.create("src")
dir.create("src/openssl")
install.package("kernlab")
install.packages("kernlab")
library(kernlab)
kernlab::spam
kernlab:::spam
data(spam)
?data
spamdim <- function(){
e <- new.env()
data(spam, package="kernlab", envir=e)
dim(e$spam)
}
spamdim()
data(spam, kernlab)
?data
data(spam)
data(spam, package=kernlab)
data(spam, package="kernlab")
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(openssl)
library(ssl)
library(ssl)
library(ssl)
library(ssl)
library(ssl)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 4)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 4)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 4)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 4)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 4)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 410)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 10)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 1)
.Call("R_RAND_pseudo_bytes", PACKAGE="ssl", 410)
library(ssl)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
library(ssl)
library(ssl)
library(ssl)
library(ssl)
library(ssl)
library(ssl)
rand_bytes()
rand_bytes(10)
rand_bytes(10)
library(ssl)
rand_bytes(10)
rand_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_bytes(10)
rand_bytes(10)
rand_bytes(10)
library(ssl)
library(ssl)
rand_bytes(10)
rand_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
rand_pseudo_bytes(10)
library(ssl)
library(ssl)
rawToBits
raw
??hex
as.hexmode(charToRaw("foo"))
library(ssl)
