% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/encrypt.R
\name{encrypt}
\alias{encrypt}
\alias{rsa_decrypt}
\alias{rsa_encrypt}
\title{Low-level RSA encryption}
\usage{
rsa_encrypt(data, pubkey = my_pubkey())

rsa_decrypt(data, key = my_key(), password = readline)
}
\arguments{
\item{data}{raw vector of max 245 bytes with data to encrypt/decrypt}

\item{pubkey}{public key or file path. See \code{\link{read_pubkey}}.}

\item{key}{private key or file path. See \code{\link{read_key}}.}

\item{password}{string or a function to read protected keys. See \code{\link{read_key}}.}
}
\description{
Asymmetric encryption and decryption with RSA. Because RSA only supports messages of
max 245 bytes it is typically used for exchanging a random temporary key for encrypting
larger data. This is implemented in the high-level \code{\link{encrypt_envelope}} and
\code{\link{decrypt_envelope}} functions.
}
\examples{
# Generate test keys
key <- rsa_keygen()
pubkey <- as.list(key)$pubkey

# Encrypt data with AES
tempkey <- rand_bytes(32)
iv <- rand_bytes(16)
blob <- aes_cbc_encrypt(system.file("CITATION"), tempkey, iv = iv)

# Encrypt tempkey using receivers public RSA key
ciphertext <- rsa_encrypt(tempkey, pubkey)

# Receiver decrypts tempkey from private RSA key
tempkey <- rsa_decrypt(ciphertext, key)
message <- aes_cbc_decrypt(blob, tempkey, iv)
cat(rawToChar(message))
}

